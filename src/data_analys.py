import pandas as pd
import numpy as np
import adjdatatools as adt
from adjdatatools.preprocessing import AdjustedScaler

file_path = 'data/train.csv'

df = pd.read_csv(file_path)

df = df.dropna(subset='Интракраниальная прогрессия').copy()

# Форматирование Интракраниальной прогрессии
def int_prog(LR, DM):
    lr = isinstance(LR, str) and LR != 'нет'
    dm = isinstance(DM, str) and DM != 'нет'
    
    if lr and dm: return 'ЛР+ДМ'
    elif lr: return 'ЛР'
    elif dm: return 'ДМ'
    else: return 'нет'

df['Ожидаемая прогрессия'] = df.apply(lambda row: int_prog(row['Локальный рецидив'], row['Дистантные метастазы']), axis=1)

df['Интракраниальная прогрессия'] = df.apply(lambda row: row['Ожидаемая прогрессия'], axis=1)
df = df.drop(['Интракраниальная прогрессия', 'Локальный рецидив', 'Дистантные метастазы'], axis=1)

df['Прогрессия'] = np.where(df['Ожидаемая прогрессия'] == 'нет', 0, 1)
df = df.drop('Ожидаемая прогрессия', axis=1)

# Форматирование пола
df['Пол'] = df['Пол'].str.upper()
df['Пол'] = df['Пол'].replace({'М' : '0', 'Ж' : '1'}).astype('Int8')

# Форматирование диагноза
df['КРР'] = np.where(df['Онкологический диагноз'] == 'КРР', 1, 0)
df['РМЖ'] = np.where(df['Онкологический диагноз'] == 'РМЖ', 1, 0)
df['НМРЛ'] = np.where(df['Онкологический диагноз'] == 'НМРЛ', 1, 0)
df['Меланома'] = np.where(df['Онкологический диагноз'] == 'Меланома', 1, 0)
df['РП'] = np.where(df['Онкологический диагноз'] == 'РП', 1, 0)
'''df['Диагноз'] = df['Онкологический диагноз'].astype('category').cat.codes'''
df = df.drop(['Онкологический диагноз'], axis=1)

# Заполнение пропусков в лечении
df['Лекарственное лечение'] = df['Лекарственное лечение'].fillna('Не известно')

# Форматирование Лекарственного лечения
df['Таргентная терапия'] = np.where(df['Лекарственное лечение'] == 'Таргентная терапия', 1, 0)
df['Химиотерапия'] = np.where(df['Лекарственное лечение'] == 'Химиотерапия', 1, 0)
df['Без лечения'] = np.where((df['Лекарственное лечение'] != 'Химиотерапия') & (df['Лекарственное лечение'] != 'Таргентная терапия'), 1, 0)
df = df.drop('Лекарственное лечение', axis=1)

# Преобразование значений в числовой тип
df['Число очагов в ГМ'] = pd.to_numeric(df['Число очагов в ГМ'])
df['Суммарный объем очагов'] = pd.to_numeric(df['Суммарный объем очагов'].str.replace(',', '.'))
df['Число фракций СРТ'] = pd.to_numeric(df['Число фракций СРТ'])
df['Индекс Карновского'] = pd.to_numeric(df['Индекс Карновского'])

''' print(df[['Число очагов в ГМ', 'Суммарный объем очагов', 'Число фракций СРТ', 'Индекс Карновского']])'''

# Форматирование ОВГМ, ГМ и Экстран метастаз
def binary_map(x):
    if pd.isna(x) or str(x).strip().lower() == 'нет':
        return 0
    else:
        return 1

df['ОВГМ'] = df['Дата проведения ОВГМ'].apply(binary_map)
df['Операция'] = df['Дата операции на ГМ'].apply(binary_map)

df = df.drop(['Дата проведения ОВГМ', 'Дата операции на ГМ'], axis=1)

df["Экстраниальные Метаст"] = df['Экстракраниальные метастазы'].apply(binary_map)

df = df.drop('Экстракраниальные метастазы', axis=1)
df['Экстракраниальные метастазы'] = df["Экстраниальные Метаст"]
df = df.drop("Экстраниальные Метаст", axis=1)

''' print(pd.isna(df['Дата постановки онкологического диагноза / начала первичного лечения'])) '''

# Удаление ненужных столбцов
df = df.drop(['Дата удаления первичного очага', 'Активирующие мутации', 'Объем максимального очага'], axis=1)

# Форматирование дат
df = df.dropna(subset=['Дата постановки онкологического диагноза / начала первичного лечения', 'Дата развития МГМ'])
df = df.drop(df[df['Дата развития МГМ'] == 'нет'].index)

arr_form_mgm = [33, 71, 84, 89, 395, 449]
df = df.drop(index=33)
df['Дата развития МГМ'][71] = '01.12.2005'
df['Дата развития МГМ'][84] = '01.12.2005'
df['Дата развития МГМ'][89] = '01.09.2008'
df['Дата 1-ой СРТ'][395] = '08.12.2015'
df['Дата развития МГМ'][449] = '01.12.2005'
df['Дата постановки онкологического диагноза / начала первичного лечения'][84] = '18.01.2005'

df['Дата постановки онкологического диагноза / начала первичного лечения'] = pd.to_datetime(df['Дата постановки онкологического диагноза / начала первичного лечения'],  format='%d.%m.%Y')
df['Дата развития МГМ'] = pd.to_datetime(df['Дата развития МГМ'], format='%d.%m.%Y')
df['Дата рождения'] = pd.to_datetime(df['Дата рождения'], format='%d.%m.%Y')
df['Дата 1-ой СРТ'] = pd.to_datetime(df['Дата 1-ой СРТ'], format='%d.%m.%Y')

df['Развитие МГМ - Постановка онкологического диагноза'] = (df['Дата развития МГМ'] - df['Дата постановки онкологического диагноза / начала первичного лечения']).dt.days
df['1-ая СРТ - ДР'] = (df['Дата 1-ой СРТ'] - df['Дата рождения']).dt.days
df['1-ая СРТ - Развитие МГМ'] = (df['Дата 1-ой СРТ'] - df['Дата развития МГМ']).dt.days

df = df.drop(['Дата постановки онкологического диагноза / начала первичного лечения', 'Дата развития МГМ', 'Дата рождения', 'Дата 1-ой СРТ'], axis=1)

# Нормирование данных
scal = {'Число фракций СРТ', 'Индекс Карновского', 'Число очагов в ГМ', 'Суммарный объем очагов', 
          'Развитие МГМ - Постановка онкологического диагноза', '1-ая СРТ - ДР', '1-ая СРТ - Развитие МГМ'}
oth = set(df.columns) - scal
drf = df[list(scal)]
new_scaler = AdjustedScaler()
new_scaler.fit(drf)
scaled_df = new_scaler.transform(drf)
scaled_df[list(oth)] = df[list(oth)]


print(df)
print(scaled_df)
print(scaled_df.loc[4])
df_save = scaled_df.to_csv('data/scaled_train.csv', encoding='utf-8', index=False)
